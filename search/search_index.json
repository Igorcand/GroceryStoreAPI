{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1-home/","title":"GroceryStoreAPI","text":""},{"location":"1-home/#sobre-o-projeto","title":"Sobre o Projeto","text":"<p>Ol\u00e1, seja bem vindo ao GroceryStoreAPI. Um projeto autoral que foi desenvolvido com a inten\u00e7\u00e3o de praticar minhas habilidades de Back-End. Nesse sentido, com o intuito de aprender a fazer uma aplica\u00e7\u00e3o cada vez mais robusta e proxima da vida real, foi desenvolvido uma API REST utilizando Python e as melhores conven\u00e7\u00f5es da linguagem como a PEP8 e a PEP257 que simula um pequeno mercadinho com as seguintes funcionalidades: Cadastro de produtos, Lan\u00e7amento de vendas e Relat\u00f3rio de caixa. Feito isso, foi adicionado \u00e0 essa API outras tecnologias para que o projeto fique o mais completo poss\u00edvel. </p>"},{"location":"1-home/#tecnologias-usadas","title":"Tecnologias usadas","text":""},{"location":"1-home/#back-end","title":"Back End","text":"<ul> <li>Python</li> <li>Django</li> <li>Django Rest Framework</li> <li>Swagger</li> <li>Autentica\u00e7\u00e3o JWT</li> <li>Pytest</li> <li>Poetry</li> <li>Docker</li> <li>Redis</li> <li>Celery</li> </ul>"},{"location":"1-home/#banco-de-dados","title":"Banco de Dados","text":"<ul> <li>Postgres</li> <li>SQLite</li> </ul>"},{"location":"1-home/#autor","title":"Autor","text":"<p>Igor C\u00e2ndido Rodrigues</p> <p>https://www.linkedin.com/in/igorc%C3%A2ndido/</p>"},{"location":"2-info/","title":"Info","text":""},{"location":"2-info/#requisitos-obrigatorios","title":"Requisitos Obrigat\u00f3rios","text":"<ul> <li>Python</li> <li>Poetry</li> <li>Docker</li> <li>Git</li> </ul>"},{"location":"2-info/#estrutura-do-projeto","title":"Estrutura do projeto","text":"<pre><code>|--GroceryStoreAPI/ (APLICA\u00c7\u00c3O PRINCIPAL)\n|   |-- .github/\n|   |   |-- workflows/\n|   |   |   |-- ci-cd.yml\n|   |-- src/\n|   |   |-- apps/ (PASTA DE APPS)\n|   |   |   |-- authorizarion/ (APP DJANGO)\n|   |   |   |   |-- apps.py\n|   |   |   |   |-- models.py\n|   |   |   |   |-- urls.py\n|   |   |   |   |-- views.py\n|   |   |   |-- products/ (APP DJANGO)\n|   |   |   |   |-- tests/ (PASTA PARA TESTES)\n|   |   |   |   |   |-- test_categories.py\n|   |   |   |   |   |-- test_products.py\n|   |   |   |   |-- admin.py\n|   |   |   |   |-- apps.py\n|   |   |   |   |-- models.py\n|   |   |   |   |-- serializers.py\n|   |   |   |   |-- urls.py\n|   |   |   |   |-- views.py\n|   |   |   |-- reports/ (APP DJANGO)\n|   |   |   |   |-- tests/ (PASTA PARA TESTES)\n|   |   |   |   |   |-- test_reports.py\n|   |   |   |   |-- admin.py\n|   |   |   |   |-- apps.py\n|   |   |   |   |-- models.py\n|   |   |   |   |-- serializers.py\n|   |   |   |   |-- urls.py\n|   |   |   |   |-- views.py\n|   |   |   |-- sales/ (APP DJANGO)\n|   |   |   |   |-- tests/ (PASTA PARA TESTES)\n|   |   |   |   |   |-- test_sales.py\n|   |   |   |   |-- admin.py\n|   |   |   |   |-- apps.py\n|   |   |   |   |-- models.py\n|   |   |   |   |-- serializers.py\n|   |   |   |   |-- urls.py\n|   |   |   |   |-- views.py\n|   |   |-- mixins/\n|   |   |   |-- log.py\n|   |   |-- project/ (PROJECT DJANGO)   \n|   |   |   |-- asgi.py\n|   |   |   |-- settings.py\n|   |   |   |-- urls.py\n|   |   |   |-- wsgi.py\n|   |   |-- manage.py\n|   |-- docs/\n|   |   |-- assets/ (PASTA DE IMAGENS)\n|   |   |   |-- admin/ (IMAGENS DO DJANGO-ADMIN)\n|   |   |   |-- api/ (IMAGENS DO FUNCIONAMENTO DAS ROTAS)\n|   |   |   |-- auth/ (IMAGENS DA AUTENTICA\u00c7\u00c3O)\n|   |   |   |-- celery/ (IMAGENS DO CELERY)\n|   |   |   |-- database/ (IMAGENS DO RELECIONAMENTO DAS TABELAS)\n|   |   |   |-- docker/ (IMAGENS DO DOCKER)\n|   |   |   |-- pytest/ (IMAGENS DOS TESTES EXECUTADOS)\n|   |   |   |-- redis/ (IMAGENS DO REDIS)\n|   |   |   |-- swagger/ (IMAGENS DA DOCUMENTA\u00c7\u00c3O SWAGGER)\n|   |   | ...\n|-- .dockerignore\n|-- .env\n|-- .gitignore\n|-- docker-compose.yaml\n|-- Dockerfile\n|-- LICENSE\n|-- logfile.log\n|-- Makefile\n|-- mkdocs.yml\n|-- poetry.lock\n|-- pyproject.toml\n|-- pytest.ini\n|-- README.md\n|-- requirements.txt\n\n</code></pre>"},{"location":"2-info/#relacionamento-de-tabelas-do-banco-de-dados","title":"Relacionamento de tabelas do Banco de Dados","text":"<p>Para criar imagens para um melhor entendimento das tabelas do banco de dados, utilize o site dbdiagram.io</p>"},{"location":"3-intro/","title":"Instru\u00e7\u00f5es","text":""},{"location":"3-intro/#como-clonar-o-projeto","title":"Como clonar o projeto","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/Igorcand/GroceryStoreAPI.git\n\n#Entrar na pasta\ncd GroceryStoreAPI\n\n</code></pre>"},{"location":"3-intro/#variaveis-de-ambiente","title":"Vari\u00e1veis de ambiente","text":"<p>As vari\u00e1veis de ambiente s\u00e3o cadeias de caracteres que cont\u00eam informa\u00e7\u00f5es sobre o ambiente do sistema e sobre o usu\u00e1rio que est\u00e1 no momento conectado. Alguns programas de software usam as informa\u00e7\u00f5es para determinar onde colocar arquivos (como por exemplo, os arquivos tempor\u00e1rios).</p> <p>Para o projeto ficar mais seguro, n\u00e3o \u00e9 recomendado que coloque informa\u00e7\u00f5es sens\u00edveis direto no c\u00f3digo, por isso usamos as vari\u00e1veis de ambiente. Com isso, as vari\u00e1veis SECRET_KEY e DEBUG precisam ser adicionadas ao c\u00f3digo para funcionar.</p>"},{"location":"3-intro/#passo-1","title":"Passo 1","text":"<p>Criar um arquivo chamado '.env' na raiz do projeto</p>"},{"location":"3-intro/#passo-2","title":"Passo 2","text":"<p>Adicionar no arquivo criado os valores correspondente das vari\u00e1veis </p>"},{"location":"3-intro/#exemplo","title":"Exemplo","text":"<pre><code>SECRET_KEY = \"sua_secret_key\"\nDEBUG = True\n</code></pre>"},{"location":"3-intro/#como-rodar-o-projeto","title":"Como rodar o projeto","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/Igorcand/GroceryStoreAPI.git\n\n#Entrar na pasta\ncd GroceryStoreAPI\n\n# Fazer o build da imagem\ndocker build .\n\n# Executar a imagem\ndocker-compose up -d --build\n\n# Criar as tabelas do Banco de Dados dentro do container\ndocker-compose exec api python src/manage.py migrate\n\n# Criar um superusu\u00e1rio\ndocker-compose exec api python src/manage.py createsuperuser\n\n# Finalizar a imagem, caso necessite\ndocker-compose down\n\n# Ap\u00f3s os passos anteriores, para executar a imagem novamente, utilize apenas o comando abaixo\ndocker-compose up\n</code></pre>"},{"location":"3-intro/#como-rodar-os-testes","title":"Como rodar os testes","text":"<pre><code>\n# Entrar no ambiente virtual do Poetry\npoetry shell\n\n# Entrar no diretorio src/\ncd src/\n\n# Rodar os testes\npytest\n</code></pre>"},{"location":"3-intro/#como-rodar-as-verificacoes-de-boas-praticas","title":"Como rodar as verifica\u00e7\u00f5es de boas pr\u00e1ticas","text":"<pre><code># Entrar no ambiente virtual do Poetry\npoetry shell\n\n# Caso tenha o Make instalado em sua m\u00e1quina, poder\u00e1 rodar o comando\nmake format\nmake lint\n\n# Caso contr\u00e1rio\nisort .\nblue .\nprospector --with-tool pep257\n\n</code></pre>"},{"location":"4-api/","title":"API REST","text":"<p>API \u00e9 uma sigla do ingl\u00eas que significa Application Programming Interface que traduzindo seria uma Interface de Programa\u00e7\u00e3o de Aplicativos.</p> <p>APIs s\u00e3o mecanismos que permitem que dois componentes de software se comuniquem usando um conjunto de defini\u00e7\u00f5es e protocolos. Por exemplo, o sistema de software do instituto meteorol\u00f3gico cont\u00e9m dados meteorol\u00f3gicos di\u00e1rios.</p> <p>Para a utiliza\u00e7\u00e3o da API REST do mercadinho, foi feito um CRUD para as tabelas do banco de dados mais importantes, e outras apenas rotas de GET e POST.</p>"},{"location":"4-api/#categoria","title":"Categoria","text":"<p>Para ver, adicionar e deletar as categorias dos produtos do seu mercadinho, voc\u00ea deve utilizar as rotas com o End-Point: - /api/categories/</p>"},{"location":"4-api/#visualizar-categorias","title":"Visualizar categorias","text":"<p>Para visualizar as categorias cadastradas voc\u00ea deve utilizar o m\u00e9todo HTTP GET no End-Point abaixo para visualizar todas as categorias cadastradas - http://localhost/api/categories/ (M\u00c9TODO HTTP GET) </p> <p></p> <p>Caso deseje visualizar apenas uma categoria espec\u00edfica, voc\u00ea poder\u00e1 adicionar o ID no final do End-Point.</p> <ul> <li>http://localhost/api/categories/{ID}/ (M\u00c9TODO HTTP GET)</li> </ul> <p></p>"},{"location":"4-api/#adicionar-categorias","title":"Adicionar categorias","text":"<p>Para adicionar categorias voc\u00ea deve utilizar o End-Point principal descrito acima e passar um JSON com os parametros necess\u00e1rios para o cadastramento. - http://localhost/api/categories/ (M\u00c9TODO HTTP POST)</p> <p></p>"},{"location":"4-api/#deletar-categorias","title":"Deletar categorias","text":"<p>Para deletar categorias existentes voc\u00ea deve utilizar o End-Point principal, passando na URL o ID da categoria espec\u00edfica que deseja deletar - http://localhost/api/categories/{ID}/ (M\u00c9TODO HTTP DELETE)</p> <p>OBS: S\u00f3 \u00e9 possivel deletar categorias existentes, caso o ID passado n\u00e3o exista voc\u00ea ser\u00e1 avisado.</p> <p></p> <p>OBS: S\u00f3 \u00e9 possivel deletar que n\u00e3o est\u00e3o sendo usadas, caso a categoria passada esteja em uso por algum produto, voc\u00ea ser\u00e1 avisado.</p> <p></p>"},{"location":"4-api/#produtos","title":"Produtos","text":"<p>Para ver, adicionar, deletar e atualizar os produtos no seu mercadinho, voc\u00ea deve utilizar as rotas com o End-Point: - /api/products/</p>"},{"location":"4-api/#visualizar-produtos","title":"Visualizar produtos","text":"<p>Para visualizar os produtos cadastrados voc\u00ea deve utilizar o m\u00e9todo HTTP GET no End-Point acima para visualizar todos os produtos cadastrados - http://localhost/api/products/ (M\u00c9TODO HTTP GET)</p> <p></p> <p>Caso deseje visualizar apenas um produto, voc\u00ea poder\u00e1 adicionar o ID no final do End-Point.</p> <ul> <li>http://localhost/api/products/{ID}/ (M\u00c9TODO HTTP GET)</li> </ul> <p></p>"},{"location":"4-api/#adicionar-produtos","title":"Adicionar produtos","text":"<p>Para adicionar produtos voc\u00ea deve utilizar o End-Point principal descrito acima e passar um JSON com os parametros necess\u00e1rios para o cadastramento. - http://localhost/api/products/ (M\u00c9TODO HTTP POST)</p> <p></p> <p>OBS: O cadastramento de produtos s\u00f3 \u00e9 possivel tendo um categoria j\u00e1 cadastrada no banco de dados, caso n\u00e3o tenha, voc\u00ea ser\u00e1 avisado.</p> <p></p> <p>OBS: O cadastramento de produtos s\u00f3 \u00e9 possivel para um produto novo, caso o produto j\u00e1 exista, voc\u00ea ser\u00e1 avisado.</p> <p></p>"},{"location":"4-api/#atualizar-produtos","title":"Atualizar produtos","text":"<p>Para atualizar os produtos existentes voc\u00ea deve utilizar o End-Point principal, passando na URL o ID do produto espec\u00edfico que deseja atualizar e passar um JSON com os parametros necess\u00e1rios para a atualiza\u00e7\u00e3o. - http://localhost/api/products/{ID}/ (M\u00c9TODO HTTP PUT)</p> <p></p> <p>OBS: A atualiza\u00e7\u00e3o de produtos s\u00f3 \u00e9 possivel tendo o produto j\u00e1 cadastrado no banco de dados, caso n\u00e3o tenha, voc\u00ea ser\u00e1 avisado.</p> <p></p>"},{"location":"4-api/#deletar-produtos","title":"Deletar produtos","text":"<p>Para deletar os produtos existentes voc\u00ea deve utilizar o End-Point principal, passando na URL o ID do produto espec\u00edfico que deseja deletar - http://localhost/api/products/{ID}/ (M\u00c9TODO HTTP DELETE)</p> <p>OBS: Para deletar produtos s\u00f3 \u00e9 possivel tendo o produto j\u00e1 cadastrado no banco de dados, caso n\u00e3o tenha, voc\u00ea ser\u00e1 avisado.</p> <p></p>"},{"location":"4-api/#vendas","title":"Vendas","text":"<p>Para adicionar e ver as vendas do seu mercadinho, voc\u00ea deve utilizar as rotas com o End-Point: - /api/sales/</p>"},{"location":"4-api/#visualizar-vendas","title":"Visualizar vendas","text":"<p>Para visualizar as vendas que aconteceram voc\u00ea deve utilizar o m\u00e9todo HTTP GET no End-Point acima para visualizar todas as vendas cadastradas. - http://localhost/api/sales/ (M\u00c9TODO HTTP GET) </p> <p></p>"},{"location":"4-api/#adicionar-vendas","title":"Adicionar vendas","text":"<p>Para adicionar as vendas voc\u00ea deve utilizar o End-Point principal descrito acima e passar um JSON com os parametros necess\u00e1rios para o lan\u00e7amento de vendas - http://localhost/api/sales/ (M\u00c9TODO HTTP POST)</p> <p></p> <p>OBS: O lan\u00e7amento de vendas s\u00f3 \u00e9 possivel tendo o produto j\u00e1 cadastrado no banco de dados, caso n\u00e3o tenha, voc\u00ea ser\u00e1 avisado.</p> <p></p> <p>OBS: O lan\u00e7amento de vendas s\u00f3 \u00e9 possivel caso o produto tenha estoque suficiente para a sua compra</p> <p></p>"},{"location":"4-api/#relatorios","title":"Relat\u00f3rios","text":"<p>Para ver e filtrar os relatorios do seu mercadinho, voc\u00ea deve utilizar as rotas com o End-Point: - /api/sales/</p>"},{"location":"4-api/#visualizar-relatorios","title":"Visualizar relat\u00f3rios","text":"<p>Para visualizar todos os relat\u00f3rios que aconteceram voc\u00ea deve utilizar o m\u00e9todo HTTP GET no End-Point acima para visualizar todos os relat\u00f3rios. - http://localhost/api/reports/ (M\u00c9TODO HTTP GET) </p> <p></p>"},{"location":"4-api/#filtrar-relatorios","title":"Filtrar relat\u00f3rios","text":"<p>Para filtrar os relat\u00f3rios voc\u00ea deve utilizar o End-Point principal descrito acima e passar um JSON com os parametros que voc\u00ea deseja filtrar, como data, pagamento, produto, etc.  - http://localhost/api/reports/ (M\u00c9TODO HTTP POST)</p> <p></p> <p>Na imagem abaixo est\u00e1 um JSON com todos os par\u00e2metros dispon\u00edveis.</p> <p></p>"},{"location":"5-technologies/","title":"Tecnologias","text":""},{"location":"5-technologies/#poetry","title":"Poetry","text":"<p>Criado por S\u00e9bastien Eustace em 2018, o Poetry surge para tentar trazer solu\u00e7\u00f5es que foram deixadas de lado por gerenciadores antigos. Ele permite que voc\u00ea declare as bibliotecas das quais seu projeto depende e assim tudo ser\u00e1 gerenciado para voc\u00ea.</p> <p>Ao inicialixar um projeto com o poetry \u00e9 criado dois arquivos que se\u00e3o respons\u00e1veis em administrar seu ambiente virtual, poetry.lock e pyproject.toml</p> <p>No arquivo pyproject.toml ter\u00e1 informa\u00e7\u00f5es sobre seu projeto como nome, vers\u00e3o, descri\u00e7\u00e3o, dependencias, etc</p> <p></p> <p>No arquivo poetry.lock ficar\u00e1 as dependencias do seu projeto que ser\u00e3o utilizadas para a inicializa\u00e7\u00e3o do ambiente virtual.</p> <p></p>"},{"location":"5-technologies/#alguns-comandos-do-poetry-que-talvez-possa-precisar","title":"Alguns comandos do Poetry que talvez possa precisar","text":""},{"location":"5-technologies/#ativacao-do-ambiente-virtual","title":"Ativa\u00e7\u00e3o do ambiente virtual","text":"<pre><code>poetry shell\n</code></pre>"},{"location":"5-technologies/#adicionar-nova-biblioteca","title":"Adicionar nova biblioteca","text":"<pre><code># Para adicionar dependencias de produ\u00e7\u00e3o\npoetry add your_lib\n\n# Para adicionar dependencias de desenvolvimento\npoetry add --dev your_lib\n</code></pre>"},{"location":"5-technologies/#remover-nova-biblioteca","title":"Remover nova biblioteca","text":"<pre><code># Para remover dependencias de produ\u00e7\u00e3o\npoetry remove your_lib\n\n# Para remover dependencias de desenvolvimento\npoetry remove --dev your_lib\n</code></pre>"},{"location":"5-technologies/#criar-um-requirementstxt","title":"Criar um requirements.txt","text":"<pre><code>poetry export -f requirements.txt --output requirements.txt\n</code></pre>"},{"location":"5-technologies/#formatacoes-de-codigo","title":"Formata\u00e7\u00f5es de C\u00f3digo","text":"<p>Cada programador escreve os c\u00f3digos de uma maneira, utilizam um tamanho de tela, um softwere, e entre outras diferen\u00e7as que podem aparecer quando se trata de codas. Com isso, passaram a existir convens\u00f5es para que as pessoas passasem cada vez mais a utilizarem um padr\u00e3o, para que fique mais facil o entendimento dos c\u00f3digos, com isso, para que n\u00f3s n\u00e3o precisemos lembrar de todas as conven\u00e7\u00f5es, existem formatadores de c\u00f3digo que fazem isso n\u00f3s.</p> <p>Utilizamos nesse projeto, 3 bibliotecas \u00f3timas que fazem essa formata\u00e7\u00e3o automaticamente, j\u00e1 corrigindo o erro, que s\u00e3o:</p>"},{"location":"5-technologies/#blue","title":"blue","text":"<pre><code>poetry shell\nblue .\n</code></pre>"},{"location":"5-technologies/#isort","title":"isort","text":"<pre><code>poetry shell\nisort .\n</code></pre>"},{"location":"5-technologies/#prospector","title":"prospector","text":"<pre><code>poetry shell\nprospector --with-tool pep257 --docs-warning\n</code></pre>"},{"location":"5-technologies/#admin","title":"Admin","text":"<p><code> Uma das partes mais poderosas do Django \u00e9 a interface de administra\u00e7\u00e3o autom\u00e1tica. Ele l\u00ea metadados de seus modelos para fornecer uma interface r\u00e1pida e centrada no modelo, onde usu\u00e1rios confi\u00e1veis \u200b\u200bpodem gerenciar o conte\u00fado em seu site. O uso recomendado do administrador \u00e9 limitado \u00e0 ferramenta de gerenciamento interno de uma organiza\u00e7\u00e3o. N\u00e3o se destina a construir todo o seu front-end. <p>O administrador tem muitos ganchos para personaliza\u00e7\u00e3o, mas cuidado ao tentar usar esses ganchos exclusivamente. Se voc\u00ea precisar fornecer uma interface mais centrada no processo que abstraia os detalhes de implementa\u00e7\u00e3o de tabelas e campos do banco de dados, provavelmente \u00e9 hora de escrever suas pr\u00f3prias exibi\u00e7\u00f5es. </p> <p>Para acessar a p\u00e1gina, basta acessar a URL abaixo e fazer o login com o mesmo usu\u00e1rio e senha do seu super usu\u00e1rio.</p> <ul> <li>https://localhost/admin/</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"5-technologies/#swagger","title":"Swagger","text":"<p>O Swagger \u00e9 um framework composto por diversas ferramentas que, independente da linguagem, auxilia a descri\u00e7\u00e3o, consumo e visualiza\u00e7\u00e3o de servi\u00e7os de uma API REST. </p> <p>Foi usado a biblioteca drf-yasg na sua vers\u00e3o 1.21.4 para construir a documenta\u00e7\u00e3o da API, como mostra abaixo.</p> <p>Para acessar a documenta\u00e7\u00e3o, acesse a URL abaixo:</p> <ul> <li>https://localhost/swagger/</li> </ul> <p> </p> <p>Para acessar o redoc, acesse a URL abaixo:</p> <ul> <li>https://localhost/redoc/</li> </ul> <p></p>"},{"location":"5-technologies/#pytest","title":"Pytest","text":"<p>A framework  pytest facilita a escrita de testes pequenos e leg\u00edveis e pode ser dimensionada para oferecer suporte a testes funcionais complexos para aplicativos e bibliotecas.</p> <p>No projeto foi constuido testes para todas as rotas descritas na sess\u00e3o anterior de sobre como utilizar a API do mercadinho. O intuito dos testes s\u00e3o avaliar as responses e os c\u00f3digos de status, de chamadas que deveriam funcionar e tamb\u00e9m as que deveriam falhar.</p> <p></p> <pre><code>## Como rodar os testes ##\n\n# Entrar no ambiente virtual do Poetry\npoetry shell\n\n# Entrar no diretorio src/\ncd src/\n\n# Rodar os testes\npytest\n</code></pre>"},{"location":"5-technologies/#redis","title":"REDIS","text":"<p> O Redis \u00e9 um armazenamento de estrutura de dados de chave-valor de c\u00f3digo aberto e na mem\u00f3ria. O Redis oferece um conjunto de estruturas vers\u00e1teis de dados na mem\u00f3ria que permite a f\u00e1cil cria\u00e7\u00e3o de v\u00e1rias aplica\u00e7\u00f5es personalizadas. Os principais casos de uso do Redis incluem cache, gerenciamento de sess\u00f5es, PUB/SUB e classifica\u00e7\u00f5es.</p> <p> No projeto em particular, foi adicionado o mesmo End-Point para a visualiza\u00e7\u00e3o dos produtos utilizando o sistema de cache oferecido pelo Redis. Foi feito a mesma rota pra fins de compara\u00e7\u00e3o com o uso do cache e sem, pois com o cache a resposta \u00e9 mais r\u00e1pida por\u00e9m a atualiza\u00e7\u00e3o n\u00e3o \u00e9 instant\u00e2nea.</p> <p>O End-Point contruido na aplica\u00e7\u00e3o \u00e9:  - https://localhost/api/products_cache/ (M\u00c9TODO HTTP GET)</p> <p> Voc\u00ea poder\u00e1 testar a rota adicionando um produto como descrito na sess\u00e3o acima, e utilizar a rota acima, voc\u00ea ver\u00e1 que o produto rec\u00e9m adicionado n\u00e3o ir\u00e1 aparecer, e se voc\u00ea rodar a rota de visualizar todos os produtos, ele estar\u00e1 l\u00e1. S\u00f3 ap\u00f3s 60 segundos que seu produto ir\u00e1 aparecer na rota em que o cache do Redis est\u00e1 funcionando. </p>"},{"location":"5-technologies/#celery","title":"Celery","text":"<p>O Celery \u00e9 um sistema distribu\u00eddo simples, flex\u00edvel e confi\u00e1vel para processar grandes quantidades de mensagens, ao mesmo tempo em que fornece \u00e0s opera\u00e7\u00f5es as ferramentas necess\u00e1rias para manter esse sistema.</p> <p>\u00c9 uma fila de tarefas com foco no processamento em tempo real, al\u00e9m de oferecer suporte ao agendamento de tarefas.As filas de tarefas s\u00e3o usadas como um mecanismo para distribuir o trabalho entre threads ou m\u00e1quinas.A entrada de uma fila de tarefas \u00e9 uma unidade de trabalho denominada tarefa. Processos de trabalho dedicados monitoram constantemente as filas de tarefas para novos trabalhos a serem executados.</p> <p>O Celery requer um transporte de mensagens para enviar e receber mensagens. Os transportes do broker RabbitMQ e Redis s\u00e3o completos, mas tamb\u00e9m h\u00e1 suporte para Amazon SQS, Apachhe Zookeeper, entre outros.</p> <p>No projeto em si, ser\u00e1 utilizado o Redis para o sistema de mensageria pois j\u00e1 est\u00e1 feito a instala\u00e7\u00e3o como descrito na sess\u00e3o anterior. Foi adicionado uma simples rota para exemplificar como o sistema de filas e tarefas funcionam em uma aplica\u00e7\u00e3o, e para ter uma no\u00e7\u00e3o de como escalar para caso a aplica\u00e7\u00e3o cresca.</p> <p>Para utilizar o end-point wue foi criado para o celery basta abrir o Postman, ou qualquer outra plataforma de API, e fazer a simples chamada no End-Point abaixo:</p> <ul> <li>https://localhost/celery/ (M\u00c9TODO HTTP GET)</li> </ul> <p>Esta rota ir\u00e1 apenas retornar uma mensagem \"Done\" e um c\u00f3digo 200. </p> <p></p> <p>Por\u00e9m, se voc\u00ea observar no terminal que voc\u00ea rodou o comando do celery, poder\u00e1 observar que foi executada uma a\u00e7\u00e3o que foi justamente mostrar na tela os n\u00fameros de 0 a 9. Isso mostra como o celery funciona, em que ele passa a responsabilidade da execu\u00e7\u00e3o da opera\u00e7\u00e3o para outra m\u00e1quina, desocupando a principal para que ela possa executar  outra coisa, e quando a tarefa executada pelo Celery terminar, ele ir\u00e1 devolver a resposta.</p> <p></p> <p>Utilizando a biblioteca django-celery-results nos podemos ver o resultado das tarefas executadas de uma maneira mais clara e leg\u00edvel. Pois com ela, nos podemos acessar o admin do django pela URL abaixo e ver que temos mais duas tabelas acrescentadas.</p> <ul> <li>https://localhost/admin/ </li> </ul> <p></p> <p>A se clicarmos em \"Task results\" podemos ver mais informa\u00e7\u00f5es sobre a tarefa executada que antes eram omitidas.</p> <p></p> <p>Para a implementa\u00e7\u00e3o do Celery na aplica\u00e7\u00e3o foi utilizado o link abaixo como refer\u00eancia para a integra\u00e7\u00e3o do Django, Celery e o Redis. - link para o v\u00eddeo</p>"},{"location":"5-technologies/#logs-e-sentry","title":"Logs e Sentry","text":"<p>Logging \u00e9 uma maneira de rastrear eventos que acontecem quando algum software executa. O desenvolvedor de software adiciona chamadas de logging no c\u00f3digo para indicar que determinado evento ocorreu. Um evento \u00e9 descrito por uma mensagem descritiva que pode opcionalmente conter o dado de uma vari\u00e1vel (ex.: dado que \u00e9 potencialmente diferente pra cada ocorr\u00eancia do evento). Eventos tamb\u00e9m tem um peso que o desenvolvedor atribui para o evento; o peso pode tamb\u00e9m ser chamada de n\u00edveis ou severidade.</p> <p>Logging prov\u00ea um conjunto de fun\u00e7\u00f5es convenientes para o uso simples de logging. Estas fun\u00e7\u00f5es s\u00e3o debug(), info(), warning(), error() e critical().</p> <p>Para uma melhor visualiza\u00e7\u00e3o dos logs, nos integramos a aplica\u00e7\u00e3o com Sentry, \u00e9 um servi\u00e7o de monitoramento que voc\u00ea pode configurar para se hospedar ou usado como um servi\u00e7o para capturar e relatar erros em seus aplicativos da web Python .</p> <p>Caso queira integrar com o Sentry, voc\u00ea precisa criar uma vari\u00e1vel de ambiente no arquivo .env com o link do seu projeto</p>"},{"location":"5-technologies/#exemplo","title":"Exemplo #####","text":"<pre><code>SENTRY_URL = \"https://sua_hash@sua_hash.ingest.sentry.io/sua_hash\"\n</code></pre>"},{"location":"5-technologies/#interface-do-sentry","title":"Interface do Sentry","text":"<p>Caso voc\u00ea n\u00e3o queira integrar com o sentry, tamb\u00e9m \u00e9 criado um arquivo logfile.log com as informa\u00e7\u00f5es dos logs.</p> <p></p>"},{"location":"5-technologies/#autenticacao-jwt","title":"Autentica\u00e7\u00e3o JWT","text":"<p> JWT (JSON Web Token) \u00e9 um m\u00e9todo RCT 7519 padr\u00e3o da ind\u00fastria para realizar autentica\u00e7\u00e3o entre duas partes por meio de um token assinado que autentica uma requisi\u00e7\u00e3o web. Esse token \u00e9 um c\u00f3digo em Base64 que armazena objetos JSON com os dados que permitem a autentica\u00e7\u00e3o da requisi\u00e7\u00e3o.</p> <p> Para fazer essa autentica\u00e7\u00e3o por token foi usado a biblioteca djangorestframework-simplejwt na sua vers\u00e3o 5.2.2 e com sua implementa\u00e7\u00e3o vem duas rotas para isso, a de gera\u00e7\u00e3o do token e o refresh do token. </p> <p> Para gerar o token, voc\u00ea precisa necessariamente de ser super usu\u00e1rio, e ent\u00e3o voc\u00ea passa o nome de usu\u00e1rio e a senha na rota abaixo: </p> <ul> <li>https://localhost/token/ (M\u00c9TODO HTTP POST)</li> </ul> <p></p> <p>Para gerar um novo token utilizando o refresh, basta passar o refresh token como par\u00e2metro de entrada na rota abaixo:  - https://localhost/refresh/ (M\u00c9TODO HTTP POST)</p> <p></p> <p> Durante o processo de desenvolvimento da aplica\u00e7\u00e3o, ocorreu um erro de integra\u00e7\u00e3o de tecnologias ao usar a autentica\u00e7\u00e3o JWT e os testes, pois sempre que a autentica\u00e7\u00e3o das rotas estava ativa, os testes n\u00e3o conseguiam testar as rotas por causa de justamente n\u00e3o terem o token para enviar. Com isso, foi criado uma rota simples para mostrar o funcionamento da autentica\u00e7\u00e3o. </p> <ul> <li>https://localhost/api/authorization/ (M\u00c9TODO HTTP GET)</li> </ul> <p>Caso voc\u00ea tente executar essa rota sem enviar o token no Header da requisi\u00e7\u00e3o, ir\u00e1 apresentar erro:</p> <p></p> <p>Caso voc\u00ea tente executar essa rota sem enviar o token v\u00e1lido, ir\u00e1 apresentar erro:</p> <p></p> <p>Caso envie o token dessa maneira:</p> <p>Header = {\"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc0MzEyMTQwLCJpYXQiOjE2NzQzMTE4NDAsImp0aSI6ImI4NmYyMTVmZGYzNTQzOTRhNmUzMDM1NWZkNTY2ZjhiIiwidXNlcl9pZCI6MX0.T-1bg-5sVZ_4B8VHjdG5MIOYc6WsDxEnLovyPbAXj8g\"}</p> <p>Ir\u00e1 apresentar essa mensagem simples:</p> <p></p>"},{"location":"5-technologies/#docker","title":"Docker","text":"<p>Docker \u00e9 uma forma de virtualizar aplica\u00e7\u00f5es no conceito de \u201ccontainers\u201d, trazendo da web ou de seu reposit\u00f3rio interno uma imagem completa, incluindo todas as depend\u00eancias necess\u00e1rias para executar sua aplica\u00e7\u00e3o.</p> <p>A aplica\u00e7\u00e3o uma segunda forma de funcionar que \u00e9 a partir de imagem e containers do Docker, e para isso, voc\u00ea precisa ter o Docker instalado na sua m\u00e1quina.</p> <p>link para instalar</p>"},{"location":"5-technologies/#como-rodar-pelo-docker","title":"COMO RODAR PELO DOCKER","text":"<pre><code># Fazer o build da imagem\ndocker build .\n\n# Executar a imagem\ndocker-compose up -d --build\n\n# Criar as tabelas do Banco de Dados dentro do container\ndocker-compose exec api python src/manage.py migrate\n\n# Criar um superusu\u00e1rio\ndocker-compose exec api python src/manage.py createsuperuser\n\n# Finalizar a imagem, caso necessite\ndocker-compose down\n\n# Ap\u00f3s os passos anteriores, para executar a imagem novamente, utilize apenas o comando abaixo\ndocker-compose up\n\n</code></pre>"},{"location":"5-technologies/#imagem-criada","title":"Imagem criada","text":""},{"location":"5-technologies/#rodando-a-partir-do-docker","title":"Rodando a partir do Docker","text":""},{"location":"5-technologies/#django-api","title":"Django API","text":""},{"location":"5-technologies/#postgres-database","title":"Postgres DataBase","text":""},{"location":"5-technologies/#redis_1","title":"Redis","text":""},{"location":"5-technologies/#celery_1","title":"Celery","text":""}]}